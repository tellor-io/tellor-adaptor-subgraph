// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExcessDIVARewardRecipientUpdated extends ethereum.Event {
  get params(): ExcessDIVARewardRecipientUpdated__Params {
    return new ExcessDIVARewardRecipientUpdated__Params(this);
  }
}

export class ExcessDIVARewardRecipientUpdated__Params {
  _event: ExcessDIVARewardRecipientUpdated;

  constructor(event: ExcessDIVARewardRecipientUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get excessDIVARewardRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startTimeExcessDIVARewardRecipient(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FinalReferenceValueSet extends ethereum.Event {
  get params(): FinalReferenceValueSet__Params {
    return new FinalReferenceValueSet__Params(this);
  }
}

export class FinalReferenceValueSet__Params {
  _event: FinalReferenceValueSet;

  constructor(event: FinalReferenceValueSet) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get finalValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get expiryTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MaxDIVARewardUSDUpdated extends ethereum.Event {
  get params(): MaxDIVARewardUSDUpdated__Params {
    return new MaxDIVARewardUSDUpdated__Params(this);
  }
}

export class MaxDIVARewardUSDUpdated__Params {
  _event: MaxDIVARewardUSDUpdated;

  constructor(event: MaxDIVARewardUSDUpdated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxDIVARewardUSD(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTimeMaxDIVARewardUSD(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PendingExcessDIVARewardRecipientUpdateRevoked extends ethereum.Event {
  get params(): PendingExcessDIVARewardRecipientUpdateRevoked__Params {
    return new PendingExcessDIVARewardRecipientUpdateRevoked__Params(this);
  }
}

export class PendingExcessDIVARewardRecipientUpdateRevoked__Params {
  _event: PendingExcessDIVARewardRecipientUpdateRevoked;

  constructor(event: PendingExcessDIVARewardRecipientUpdateRevoked) {
    this._event = event;
  }

  get revokedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get revokedExcessDIVARewardRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get restoredExcessDIVARewardRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PendingMaxDIVARewardUSDUpdateRevoked extends ethereum.Event {
  get params(): PendingMaxDIVARewardUSDUpdateRevoked__Params {
    return new PendingMaxDIVARewardUSDUpdateRevoked__Params(this);
  }
}

export class PendingMaxDIVARewardUSDUpdateRevoked__Params {
  _event: PendingMaxDIVARewardUSDUpdateRevoked;

  constructor(event: PendingMaxDIVARewardUSDUpdateRevoked) {
    this._event = event;
  }

  get revokedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get revokedMaxDIVARewardUSD(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get restoredMaxDIVARewardUSD(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TipAdded extends ethereum.Event {
  get params(): TipAdded__Params {
    return new TipAdded__Params(this);
  }
}

export class TipAdded__Params {
  _event: TipAdded;

  constructor(event: TipAdded) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tippingToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tipper(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TipClaimed extends ethereum.Event {
  get params(): TipClaimed__Params {
    return new TipClaimed__Params(this);
  }
}

export class TipClaimed__Params {
  _event: TipClaimed;

  constructor(event: TipClaimed) {
    this._event = event;
  }

  get poolId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tippingToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract__getDataAfterResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_value(): Bytes {
    return this.value0;
  }

  get_timestampRetrieved(): BigInt {
    return this.value1;
  }
}

export class Contract__getExcessDIVARewardRecipientInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPreviousExcessDIVARewardRecipient(): Address {
    return this.value0;
  }

  getExcessDIVARewardRecipient(): Address {
    return this.value1;
  }

  getStartTimeExcessDIVARewardRecipient(): BigInt {
    return this.value2;
  }
}

export class Contract__getIndexForDataAfterResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_found(): boolean {
    return this.value0;
  }

  get_index(): BigInt {
    return this.value1;
  }
}

export class Contract__getMaxDIVARewardUSDInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPreviousMaxDIVARewardUSD(): BigInt {
    return this.value0;
  }

  getMaxDIVARewardUSD(): BigInt {
    return this.value1;
  }

  getStartTimeMaxDIVARewardUSD(): BigInt {
    return this.value2;
  }
}

export class Contract__getPoolIdsForReportersInput_argsGetPoolIdsForReportersStruct extends ethereum.Tuple {
  get reporter(): Address {
    return this[0].toAddress();
  }

  get startIndex(): BigInt {
    return this[1].toBigInt();
  }

  get endIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract__getQueryDataAndIdResult {
  value0: Bytes;
  value1: Bytes;

  constructor(value0: Bytes, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getQueryData(): Bytes {
    return this.value0;
  }

  getQueryId(): Bytes {
    return this.value1;
  }
}

export class Contract__getTipAmountsInput_argsGetTipAmountsStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get tippingTokens(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class Contract__getTippingTokensInput_argsGetTippingTokensStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get startIndex(): BigInt {
    return this[1].toBigInt();
  }

  get endIndex(): BigInt {
    return this[2].toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getActivationDelay(): BigInt {
    let result = super.call(
      "getActivationDelay",
      "getActivationDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getActivationDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActivationDelay",
      "getActivationDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallengeable(): boolean {
    let result = super.call(
      "getChallengeable",
      "getChallengeable():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_getChallengeable(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getChallengeable",
      "getChallengeable():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDIVAAddress(): Address {
    let result = super.call("getDIVAAddress", "getDIVAAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getDIVAAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDIVAAddress",
      "getDIVAAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getDataAfterResult {
    let result = super.call(
      "getDataAfter",
      "getDataAfter(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getDataAfterResult(
      result[0].toBytes(),
      result[1].toBigInt()
    );
  }

  try_getDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getDataAfterResult> {
    let result = super.tryCall(
      "getDataAfter",
      "getDataAfter(bytes32,uint256):(bytes,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getDataAfterResult(value[0].toBytes(), value[1].toBigInt())
    );
  }

  getExcessDIVARewardRecipientInfo(): Contract__getExcessDIVARewardRecipientInfoResult {
    let result = super.call(
      "getExcessDIVARewardRecipientInfo",
      "getExcessDIVARewardRecipientInfo():(address,address,uint256)",
      []
    );

    return new Contract__getExcessDIVARewardRecipientInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_getExcessDIVARewardRecipientInfo(): ethereum.CallResult<
    Contract__getExcessDIVARewardRecipientInfoResult
  > {
    let result = super.tryCall(
      "getExcessDIVARewardRecipientInfo",
      "getExcessDIVARewardRecipientInfo():(address,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getExcessDIVARewardRecipientInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  getIndexForDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getIndexForDataAfterResult {
    let result = super.call(
      "getIndexForDataAfter",
      "getIndexForDataAfter(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getIndexForDataAfterResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getIndexForDataAfter(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getIndexForDataAfterResult> {
    let result = super.tryCall(
      "getIndexForDataAfter",
      "getIndexForDataAfter(bytes32,uint256):(bool,uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getIndexForDataAfterResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getMaxDIVARewardUSDInfo(): Contract__getMaxDIVARewardUSDInfoResult {
    let result = super.call(
      "getMaxDIVARewardUSDInfo",
      "getMaxDIVARewardUSDInfo():(uint256,uint256,uint256)",
      []
    );

    return new Contract__getMaxDIVARewardUSDInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMaxDIVARewardUSDInfo(): ethereum.CallResult<
    Contract__getMaxDIVARewardUSDInfoResult
  > {
    let result = super.tryCall(
      "getMaxDIVARewardUSDInfo",
      "getMaxDIVARewardUSDInfo():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getMaxDIVARewardUSDInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getMinPeriodUndisputed(): BigInt {
    let result = super.call(
      "getMinPeriodUndisputed",
      "getMinPeriodUndisputed():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinPeriodUndisputed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinPeriodUndisputed",
      "getMinPeriodUndisputed():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNewValueCountbyQueryId(_queryId: Bytes): BigInt {
    let result = super.call(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyQueryId(_queryId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnershipContract(): Address {
    let result = super.call(
      "getOwnershipContract",
      "getOwnershipContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOwnershipContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnershipContract",
      "getOwnershipContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolIdsForReporters(
    _argsGetPoolIdsForReporters: Array<
      Contract__getPoolIdsForReportersInput_argsGetPoolIdsForReportersStruct
    >
  ): Array<Array<Bytes>> {
    let result = super.call(
      "getPoolIdsForReporters",
      "getPoolIdsForReporters((address,uint256,uint256)[]):(bytes32[][])",
      [ethereum.Value.fromTupleArray(_argsGetPoolIdsForReporters)]
    );

    return result[0].toBytesMatrix();
  }

  try_getPoolIdsForReporters(
    _argsGetPoolIdsForReporters: Array<
      Contract__getPoolIdsForReportersInput_argsGetPoolIdsForReportersStruct
    >
  ): ethereum.CallResult<Array<Array<Bytes>>> {
    let result = super.tryCall(
      "getPoolIdsForReporters",
      "getPoolIdsForReporters((address,uint256,uint256)[]):(bytes32[][])",
      [ethereum.Value.fromTupleArray(_argsGetPoolIdsForReporters)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesMatrix());
  }

  getPoolIdsLengthForReporters(_reporters: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getPoolIdsLengthForReporters",
      "getPoolIdsLengthForReporters(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(_reporters)]
    );

    return result[0].toBigIntArray();
  }

  try_getPoolIdsLengthForReporters(
    _reporters: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPoolIdsLengthForReporters",
      "getPoolIdsLengthForReporters(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(_reporters)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getQueryDataAndId(_poolId: Bytes): Contract__getQueryDataAndIdResult {
    let result = super.call(
      "getQueryDataAndId",
      "getQueryDataAndId(bytes32):(bytes,bytes32)",
      [ethereum.Value.fromFixedBytes(_poolId)]
    );

    return new Contract__getQueryDataAndIdResult(
      result[0].toBytes(),
      result[1].toBytes()
    );
  }

  try_getQueryDataAndId(
    _poolId: Bytes
  ): ethereum.CallResult<Contract__getQueryDataAndIdResult> {
    let result = super.tryCall(
      "getQueryDataAndId",
      "getQueryDataAndId(bytes32):(bytes,bytes32)",
      [ethereum.Value.fromFixedBytes(_poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getQueryDataAndIdResult(
        value[0].toBytes(),
        value[1].toBytes()
      )
    );
  }

  getReporterByTimestamp(_queryId: Bytes, _timestamp: BigInt): Address {
    let result = super.call(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toAddress();
  }

  try_getReporterByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReporters(_poolIds: Array<Bytes>): Array<Address> {
    let result = super.call(
      "getReporters",
      "getReporters(bytes32[]):(address[])",
      [ethereum.Value.fromFixedBytesArray(_poolIds)]
    );

    return result[0].toAddressArray();
  }

  try_getReporters(
    _poolIds: Array<Bytes>
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReporters",
      "getReporters(bytes32[]):(address[])",
      [ethereum.Value.fromFixedBytesArray(_poolIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTimestampbyQueryIdandIndex(_queryId: Bytes, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyQueryIdandIndex(
    _queryId: Bytes,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTipAmounts(
    _argsGetTipAmounts: Array<
      Contract__getTipAmountsInput_argsGetTipAmountsStruct
    >
  ): Array<Array<BigInt>> {
    let result = super.call(
      "getTipAmounts",
      "getTipAmounts((bytes32,address[])[]):(uint256[][])",
      [ethereum.Value.fromTupleArray(_argsGetTipAmounts)]
    );

    return result[0].toBigIntMatrix();
  }

  try_getTipAmounts(
    _argsGetTipAmounts: Array<
      Contract__getTipAmountsInput_argsGetTipAmountsStruct
    >
  ): ethereum.CallResult<Array<Array<BigInt>>> {
    let result = super.tryCall(
      "getTipAmounts",
      "getTipAmounts((bytes32,address[])[]):(uint256[][])",
      [ethereum.Value.fromTupleArray(_argsGetTipAmounts)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntMatrix());
  }

  getTippingTokens(
    _argsGetTippingTokens: Array<
      Contract__getTippingTokensInput_argsGetTippingTokensStruct
    >
  ): Array<Array<Address>> {
    let result = super.call(
      "getTippingTokens",
      "getTippingTokens((bytes32,uint256,uint256)[]):(address[][])",
      [ethereum.Value.fromTupleArray(_argsGetTippingTokens)]
    );

    return result[0].toAddressMatrix();
  }

  try_getTippingTokens(
    _argsGetTippingTokens: Array<
      Contract__getTippingTokensInput_argsGetTippingTokensStruct
    >
  ): ethereum.CallResult<Array<Array<Address>>> {
    let result = super.tryCall(
      "getTippingTokens",
      "getTippingTokens((bytes32,uint256,uint256)[]):(address[][])",
      [ethereum.Value.fromTupleArray(_argsGetTippingTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressMatrix());
  }

  getTippingTokensLengthForPoolIds(_poolIds: Array<Bytes>): Array<BigInt> {
    let result = super.call(
      "getTippingTokensLengthForPoolIds",
      "getTippingTokensLengthForPoolIds(bytes32[]):(uint256[])",
      [ethereum.Value.fromFixedBytesArray(_poolIds)]
    );

    return result[0].toBigIntArray();
  }

  try_getTippingTokensLengthForPoolIds(
    _poolIds: Array<Bytes>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTippingTokensLengthForPoolIds",
      "getTippingTokensLengthForPoolIds(bytes32[]):(uint256[])",
      [ethereum.Value.fromFixedBytesArray(_poolIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isInDispute(_queryId: Bytes, _timestamp: BigInt): boolean {
    let result = super.call(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInDispute(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInDispute",
      "isInDispute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  retrieveData(_queryId: Bytes, _timestamp: BigInt): Bytes {
    let result = super.call(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBytes();
  }

  try_retrieveData(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tellor(): Address {
    let result = super.call("tellor", "tellor():(address)", []);

    return result[0].toAddress();
  }

  try_tellor(): ethereum.CallResult<Address> {
    let result = super.tryCall("tellor", "tellor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ownershipContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tellorAddress_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get excessDIVARewardRecipient_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get maxDIVARewardUSD_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get diva_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTipCall extends ethereum.Call {
  get inputs(): AddTipCall__Inputs {
    return new AddTipCall__Inputs(this);
  }

  get outputs(): AddTipCall__Outputs {
    return new AddTipCall__Outputs(this);
  }
}

export class AddTipCall__Inputs {
  _call: AddTipCall;

  constructor(call: AddTipCall) {
    this._call = call;
  }

  get _poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tippingToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddTipCall__Outputs {
  _call: AddTipCall;

  constructor(call: AddTipCall) {
    this._call = call;
  }
}

export class BatchAddTipCall extends ethereum.Call {
  get inputs(): BatchAddTipCall__Inputs {
    return new BatchAddTipCall__Inputs(this);
  }

  get outputs(): BatchAddTipCall__Outputs {
    return new BatchAddTipCall__Outputs(this);
  }
}

export class BatchAddTipCall__Inputs {
  _call: BatchAddTipCall;

  constructor(call: BatchAddTipCall) {
    this._call = call;
  }

  get _argsBatchAddTip(): Array<BatchAddTipCall_argsBatchAddTipStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchAddTipCall_argsBatchAddTipStruct
    >();
  }
}

export class BatchAddTipCall__Outputs {
  _call: BatchAddTipCall;

  constructor(call: BatchAddTipCall) {
    this._call = call;
  }
}

export class BatchAddTipCall_argsBatchAddTipStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get tippingToken(): Address {
    return this[2].toAddress();
  }
}

export class BatchClaimRewardCall extends ethereum.Call {
  get inputs(): BatchClaimRewardCall__Inputs {
    return new BatchClaimRewardCall__Inputs(this);
  }

  get outputs(): BatchClaimRewardCall__Outputs {
    return new BatchClaimRewardCall__Outputs(this);
  }
}

export class BatchClaimRewardCall__Inputs {
  _call: BatchClaimRewardCall;

  constructor(call: BatchClaimRewardCall) {
    this._call = call;
  }

  get _argsBatchClaimReward(): Array<
    BatchClaimRewardCall_argsBatchClaimRewardStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      BatchClaimRewardCall_argsBatchClaimRewardStruct
    >();
  }
}

export class BatchClaimRewardCall__Outputs {
  _call: BatchClaimRewardCall;

  constructor(call: BatchClaimRewardCall) {
    this._call = call;
  }
}

export class BatchClaimRewardCall_argsBatchClaimRewardStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get tippingTokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get claimDIVAReward(): boolean {
    return this[2].toBoolean();
  }
}

export class BatchSetFinalReferenceValueCall extends ethereum.Call {
  get inputs(): BatchSetFinalReferenceValueCall__Inputs {
    return new BatchSetFinalReferenceValueCall__Inputs(this);
  }

  get outputs(): BatchSetFinalReferenceValueCall__Outputs {
    return new BatchSetFinalReferenceValueCall__Outputs(this);
  }
}

export class BatchSetFinalReferenceValueCall__Inputs {
  _call: BatchSetFinalReferenceValueCall;

  constructor(call: BatchSetFinalReferenceValueCall) {
    this._call = call;
  }

  get _argsBatchSetFinalReferenceValue(): Array<
    BatchSetFinalReferenceValueCall_argsBatchSetFinalReferenceValueStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      BatchSetFinalReferenceValueCall_argsBatchSetFinalReferenceValueStruct
    >();
  }
}

export class BatchSetFinalReferenceValueCall__Outputs {
  _call: BatchSetFinalReferenceValueCall;

  constructor(call: BatchSetFinalReferenceValueCall) {
    this._call = call;
  }
}

export class BatchSetFinalReferenceValueCall_argsBatchSetFinalReferenceValueStruct extends ethereum.Tuple {
  get poolId(): Bytes {
    return this[0].toBytes();
  }

  get tippingTokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get claimDIVAReward(): boolean {
    return this[2].toBoolean();
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get _poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tippingTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _claimDIVAReward(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class RevokePendingExcessDIVARewardRecipientUpdateCall extends ethereum.Call {
  get inputs(): RevokePendingExcessDIVARewardRecipientUpdateCall__Inputs {
    return new RevokePendingExcessDIVARewardRecipientUpdateCall__Inputs(this);
  }

  get outputs(): RevokePendingExcessDIVARewardRecipientUpdateCall__Outputs {
    return new RevokePendingExcessDIVARewardRecipientUpdateCall__Outputs(this);
  }
}

export class RevokePendingExcessDIVARewardRecipientUpdateCall__Inputs {
  _call: RevokePendingExcessDIVARewardRecipientUpdateCall;

  constructor(call: RevokePendingExcessDIVARewardRecipientUpdateCall) {
    this._call = call;
  }
}

export class RevokePendingExcessDIVARewardRecipientUpdateCall__Outputs {
  _call: RevokePendingExcessDIVARewardRecipientUpdateCall;

  constructor(call: RevokePendingExcessDIVARewardRecipientUpdateCall) {
    this._call = call;
  }
}

export class RevokePendingMaxDIVARewardUSDUpdateCall extends ethereum.Call {
  get inputs(): RevokePendingMaxDIVARewardUSDUpdateCall__Inputs {
    return new RevokePendingMaxDIVARewardUSDUpdateCall__Inputs(this);
  }

  get outputs(): RevokePendingMaxDIVARewardUSDUpdateCall__Outputs {
    return new RevokePendingMaxDIVARewardUSDUpdateCall__Outputs(this);
  }
}

export class RevokePendingMaxDIVARewardUSDUpdateCall__Inputs {
  _call: RevokePendingMaxDIVARewardUSDUpdateCall;

  constructor(call: RevokePendingMaxDIVARewardUSDUpdateCall) {
    this._call = call;
  }
}

export class RevokePendingMaxDIVARewardUSDUpdateCall__Outputs {
  _call: RevokePendingMaxDIVARewardUSDUpdateCall;

  constructor(call: RevokePendingMaxDIVARewardUSDUpdateCall) {
    this._call = call;
  }
}

export class SetFinalReferenceValueCall extends ethereum.Call {
  get inputs(): SetFinalReferenceValueCall__Inputs {
    return new SetFinalReferenceValueCall__Inputs(this);
  }

  get outputs(): SetFinalReferenceValueCall__Outputs {
    return new SetFinalReferenceValueCall__Outputs(this);
  }
}

export class SetFinalReferenceValueCall__Inputs {
  _call: SetFinalReferenceValueCall;

  constructor(call: SetFinalReferenceValueCall) {
    this._call = call;
  }

  get _poolId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tippingTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _claimDIVAReward(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetFinalReferenceValueCall__Outputs {
  _call: SetFinalReferenceValueCall;

  constructor(call: SetFinalReferenceValueCall) {
    this._call = call;
  }
}

export class UpdateExcessDIVARewardRecipientCall extends ethereum.Call {
  get inputs(): UpdateExcessDIVARewardRecipientCall__Inputs {
    return new UpdateExcessDIVARewardRecipientCall__Inputs(this);
  }

  get outputs(): UpdateExcessDIVARewardRecipientCall__Outputs {
    return new UpdateExcessDIVARewardRecipientCall__Outputs(this);
  }
}

export class UpdateExcessDIVARewardRecipientCall__Inputs {
  _call: UpdateExcessDIVARewardRecipientCall;

  constructor(call: UpdateExcessDIVARewardRecipientCall) {
    this._call = call;
  }

  get _newExcessDIVARewardRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateExcessDIVARewardRecipientCall__Outputs {
  _call: UpdateExcessDIVARewardRecipientCall;

  constructor(call: UpdateExcessDIVARewardRecipientCall) {
    this._call = call;
  }
}

export class UpdateMaxDIVARewardUSDCall extends ethereum.Call {
  get inputs(): UpdateMaxDIVARewardUSDCall__Inputs {
    return new UpdateMaxDIVARewardUSDCall__Inputs(this);
  }

  get outputs(): UpdateMaxDIVARewardUSDCall__Outputs {
    return new UpdateMaxDIVARewardUSDCall__Outputs(this);
  }
}

export class UpdateMaxDIVARewardUSDCall__Inputs {
  _call: UpdateMaxDIVARewardUSDCall;

  constructor(call: UpdateMaxDIVARewardUSDCall) {
    this._call = call;
  }

  get _newMaxDIVARewardUSD(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxDIVARewardUSDCall__Outputs {
  _call: UpdateMaxDIVARewardUSDCall;

  constructor(call: UpdateMaxDIVARewardUSDCall) {
    this._call = call;
  }
}
